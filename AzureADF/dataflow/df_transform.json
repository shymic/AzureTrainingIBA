{
	"name": "df_transform",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sourceCSV1",
						"type": "DatasetReference"
					},
					"name": "sourceTable"
				},
				{
					"dataset": {
						"referenceName": "ds_refTable",
						"type": "DatasetReference"
					},
					"name": "refTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sinkTable1",
						"type": "DatasetReference"
					},
					"name": "SinkTable"
				}
			],
			"transformations": [
				{
					"name": "InnerJoin"
				},
				{
					"name": "Transformer",
					"description": "select columns"
				},
				{
					"name": "AddColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          WBS_ID as string,",
				"          COST_ELEM_CD as string,",
				"          WBS_ELEM_OC_AMT as integer,",
				"          WBS_ELEM_CC_AMT as integer,",
				"          OBJ_CRNCY_CD as string,",
				"          CNTRL_CRNCY_CD as string,",
				"          MONTH_NUM as short,",
				"          YEAR_NUM as short,",
				"          TXN_CRNCY_CD as string,",
				"          WBS_LVL_NUM as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     maxColumns: 200) ~> sourceTable",
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from COST_ELEMENT',",
				"     format: 'query') ~> refTable",
				"sourceTable, refTable join(trim(sourceTable@COST_ELEM_CD) == trim(refTable@COST_ELEM_CD),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> InnerJoin",
				"AddColumns select(mapColumn(",
				"          WBS_ID,",
				"          COST_ELEM_CD = sourceTable@COST_ELEM_CD,",
				"          VAL_CAT_CD,",
				"          FRCST_FINL_MO = MONTH_NUM,",
				"          FRCST_FINL_YR = YEAR_NUM,",
				"          OBJ_CRNCY_CD,",
				"          OBJ_AMT = WBS_ELEM_OC_AMT,",
				"          CONTRL_AMT,",
				"          CONTRL_CRNCY_CD = CNTRL_CRNCY_CD,",
				"          TXN_AMT,",
				"          TXN_CRNCY_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Transformer",
				"InnerJoin derive(TXN_AMT = case(REV_IND==1,toString(toDecimal(WBS_ELEM_OC_AMT)*-1),toString(WBS_ELEM_OC_AMT)),",
				"          TXN_CRNCY_CD = OBJ_CRNCY_CD,",
				"          CONTRL_AMT = case(REV_IND==1,toString(toDecimal(WBS_ELEM_OC_AMT)*-1),toString(WBS_ELEM_OC_AMT))) ~> AddColumns",
				"Transformer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['DELETE FROM FORECAST_LOAD'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkTable"
			]
		}
	}
}