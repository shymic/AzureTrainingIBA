{
	"name": "df_changecap",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sourceCSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_refTable",
						"type": "DatasetReference"
					},
					"name": "existingTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkUps"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkDel"
				}
			],
			"transformations": [
				{
					"name": "addHash"
				},
				{
					"name": "Upsert"
				},
				{
					"name": "NewAndExisting"
				},
				{
					"name": "ToDelete"
				},
				{
					"name": "Delete"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer,",
				"          HASH_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> existingTable",
				"source1 derive(hash_cd = md5(columns())) ~> addHash",
				"NewAndExisting alterRow(upsertIf(true())) ~> Upsert",
				"addHash, existingTable exists(addHash@hash_cd == existingTable@HASH_CD,",
				"     negate:true,",
				"     broadcast: 'auto')~> NewAndExisting",
				"existingTable, addHash exists(existingTable@COST_ELEM_CD == source1@COST_ELEM_CD,",
				"     negate:true,",
				"     broadcast: 'auto')~> ToDelete",
				"ToDelete alterRow(deleteIf(true())) ~> Delete",
				"Upsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          COST_ELEM_CD,",
				"          VAL_CAT_CD,",
				"          REV_IND,",
				"          HASH_CD = hash_cd",
				"     )) ~> sinkUps",
				"Delete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkDel"
			]
		}
	}
}