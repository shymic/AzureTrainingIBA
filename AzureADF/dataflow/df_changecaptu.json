{
	"name": "df_changecaptu",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sourceCSV",
						"type": "DatasetReference"
					},
					"name": "sourceCSV"
				},
				{
					"dataset": {
						"referenceName": "ds_refTable",
						"type": "DatasetReference"
					},
					"name": "existingTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkIns"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkUpd"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkDel"
				}
			],
			"transformations": [
				{
					"name": "addHashSource"
				},
				{
					"name": "FullJoin"
				},
				{
					"name": "changeCode"
				},
				{
					"name": "InsertRow"
				},
				{
					"name": "selectIns"
				},
				{
					"name": "split1"
				},
				{
					"name": "UpdRow"
				},
				{
					"name": "DelRow"
				},
				{
					"name": "selectUpd"
				},
				{
					"name": "selectDel"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCSV",
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer,",
				"          HASH_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM COST_ELEMENT_1',",
				"     format: 'query') ~> existingTable",
				"sourceCSV derive(HASH_CD = md5(VAL_CAT_CD,REV_IND)) ~> addHashSource",
				"addHashSource, existingTable join(sourceCSV@COST_ELEM_CD == existingTable@COST_ELEM_CD,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FullJoin",
				"FullJoin derive(change_code = case(isNull(addHashSource@HASH_CD),2,case(isNull(existingTable@HASH_CD),1,case(notEquals(addHashSource@HASH_CD, existingTable@HASH_CD),3,0)))) ~> changeCode",
				"split1@Insert alterRow(insertIf(true())) ~> InsertRow",
				"InsertRow select(mapColumn(",
				"          COST_ELEM_CD = split1@Insert@COST_ELEM_CD,",
				"          VAL_CAT_CD = split1@Insert@VAL_CAT_CD,",
				"          REV_IND = split1@Insert@REV_IND,",
				"          HASH_CD = split1@Insert@HASH_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectIns",
				"changeCode split(change_code==1,",
				"     change_code==3,",
				"     change_code==2,",
				"     disjoint: false) ~> split1@(Insert, Update, Delete)",
				"split1@Update alterRow(updateIf(true())) ~> UpdRow",
				"split1@Delete alterRow(deleteIf(true())) ~> DelRow",
				"UpdRow select(mapColumn(",
				"          COST_ELEM_CD = split1@Update@COST_ELEM_CD,",
				"          VAL_CAT_CD = split1@Update@VAL_CAT_CD,",
				"          REV_IND = split1@Update@REV_IND,",
				"          HASH_CD = split1@Update@HASH_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpd",
				"DelRow select(mapColumn(",
				"          COST_ELEM_CD = split1@Delete@COST_ELEM_CD,",
				"          VAL_CAT_CD = split1@Delete@VAL_CAT_CD,",
				"          REV_IND = split1@Delete@REV_IND,",
				"          HASH_CD = split1@Delete@HASH_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDel",
				"selectIns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkIns",
				"selectUpd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkUpd",
				"selectDel sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkDel"
			]
		}
	}
}