{
	"name": "df_changecaptu",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sourceCSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_refTable",
						"type": "DatasetReference"
					},
					"name": "existingTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "addHashSource"
				},
				{
					"name": "addHashExist"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer,",
				"          HASH_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM COST_ELEMENT_1',",
				"     format: 'query') ~> existingTable",
				"source1 derive(hash_cd_source = md5(columns())) ~> addHashSource",
				"existingTable derive(hash_cd_exist = md5(columns())) ~> addHashExist",
				"addHashSource, addHashExist join(source1@COST_ELEM_CD == existingTable@COST_ELEM_CD,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(change_code = case(isNull(hash_cd_exist),1,3)) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(change_code==3),",
				"     insertIf(change_code==1)) ~> AlterRow1",
				"AlterRow1 select(mapColumn(",
				"          COST_ELEM_CD = source1@COST_ELEM_CD,",
				"          VAL_CAT_CD = source1@VAL_CAT_CD,",
				"          REV_IND = source1@REV_IND,",
				"          HASH_CD = hash_cd_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}