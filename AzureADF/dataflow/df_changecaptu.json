{
	"name": "df_changecaptu",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sourceCSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_refTable",
						"type": "DatasetReference"
					},
					"name": "existingTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkIns"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkUpd"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sinkDel"
				},
				{
					"dataset": {
						"referenceName": "ds_sourceCSV",
						"type": "DatasetReference"
					},
					"name": "sinkFile"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "addHashSource"
				},
				{
					"name": "addHashExist"
				},
				{
					"name": "FullJoin"
				},
				{
					"name": "changeCode"
				},
				{
					"name": "InsertRow"
				},
				{
					"name": "selectIns"
				},
				{
					"name": "split1"
				},
				{
					"name": "UpdRow"
				},
				{
					"name": "DelRow"
				},
				{
					"name": "selectUpd"
				},
				{
					"name": "selectDel"
				},
				{
					"name": "renameColumns"
				},
				{
					"name": "selectFile"
				},
				{
					"name": "RowStatus"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer,",
				"          HASH_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM COST_ELEMENT_1',",
				"     format: 'query') ~> existingTable",
				"source1 derive(s_hash_cd = md5(columns())) ~> addHashSource",
				"existingTable derive(ex_hash_cd = HASH_CD) ~> addHashExist",
				"addHashSource, addHashExist join(source1@COST_ELEM_CD == existingTable@COST_ELEM_CD,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FullJoin",
				"renameColumns derive(change_code = case(isNull(s_hash_cd),2,case(isNull(ex_hash_cd),1,case(notEquals(s_hash_cd, ex_hash_cd),3,0)))) ~> changeCode",
				"split1@Insert alterRow(insertIf(true())) ~> InsertRow",
				"InsertRow select(mapColumn(",
				"          COST_ELEM_CD = s_COST_ELEM_CD,",
				"          VAL_CAT_CD = s_VAL_CAT_CD,",
				"          REV_IND = s_REV_IND,",
				"          HASH_CD = s_hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectIns",
				"changeCode split(change_code==1,",
				"     change_code==3,",
				"     change_code==2,",
				"     disjoint: false) ~> split1@(Insert, Update, Delete, Copy)",
				"split1@Update alterRow(updateIf(true())) ~> UpdRow",
				"split1@Delete alterRow(deleteIf(true())) ~> DelRow",
				"UpdRow select(mapColumn(",
				"          COST_ELEM_CD = s_COST_ELEM_CD,",
				"          VAL_CAT_CD = s_VAL_CAT_CD,",
				"          REV_IND = s_REV_IND,",
				"          HASH_CD = s_hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpd",
				"DelRow select(mapColumn(",
				"          COST_ELEM_CD = ex_COST_ELEM_CD,",
				"          VAL_CAT_CD = ex_VAL_CAT_CD,",
				"          REV_IND = ex_REV_IND,",
				"          HASH_CD = ex_hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDel",
				"FullJoin select(mapColumn(",
				"          s_COST_ELEM_CD = source1@COST_ELEM_CD,",
				"          s_VAL_CAT_CD = source1@VAL_CAT_CD,",
				"          s_REV_IND = source1@REV_IND,",
				"          s_hash_cd,",
				"          ex_COST_ELEM_CD = existingTable@COST_ELEM_CD,",
				"          ex_VAL_CAT_CD = existingTable@VAL_CAT_CD,",
				"          ex_REV_IND = existingTable@REV_IND,",
				"          ex_hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renameColumns",
				"RowStatus select(mapColumn(",
				"          s_COST_ELEM_CD,",
				"          s_VAL_CAT_CD,",
				"          s_REV_IND,",
				"          s_hash_cd,",
				"          ROW_STATUS_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFile",
				"changeCode derive(ROW_STATUS_CD = case(change_code==1,'I',case(change_code==2,'D','U'))) ~> RowStatus",
				"changeCode alterRow(insertIf(change_code==1),",
				"     deleteIf(change_code==2),",
				"     updateIf(change_code==3)) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          s_COST_ELEM_CD,",
				"          s_VAL_CAT_CD,",
				"          s_REV_IND,",
				"          s_hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"selectIns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkIns",
				"selectUpd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkUpd",
				"selectDel sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkDel",
				"selectFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 4) ~> sinkFile",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 5,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}