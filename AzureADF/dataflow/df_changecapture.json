{
	"name": "df_changecapture",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sourceCSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_refTable",
						"type": "DatasetReference"
					},
					"name": "existingTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_sinkTable",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "addHash"
				},
				{
					"name": "Insert"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "Delete"
				},
				{
					"name": "exColumns"
				},
				{
					"name": "stgColumns"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "selectColumnss"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          COST_ELEM_CD as string,",
				"          VAL_CAT_CD as string,",
				"          REV_IND as integer,",
				"          HASH_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> existingTable",
				"source1 derive(hash_cd = md5(columns())) ~> addHash",
				"split1@New alterRow(insertIf(true())) ~> Insert",
				"stgColumns, exColumns lookup(stg_hash_cd == ex_HASH_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(ex_COST_ELEM_CD),",
				"     disjoint: false) ~> split1@(New, Update)",
				"exColumns, stgColumns exists(trim(ex_COST_ELEM_CD) == stg_COST_ELEM_CD,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 alterRow(deleteIf(true())) ~> Delete",
				"existingTable select(mapColumn(",
				"          ex_COST_ELEM_CD = COST_ELEM_CD,",
				"          ex_VAL_CAT_CD = VAL_CAT_CD,",
				"          ex_REV_IND = REV_IND,",
				"          ex_HASH_CD = HASH_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> exColumns",
				"addHash select(mapColumn(",
				"          stg_COST_ELEM_CD = COST_ELEM_CD,",
				"          stg_VAL_CAT_CD = VAL_CAT_CD,",
				"          stg_REV_IND = REV_IND,",
				"          stg_hash_cd = hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> stgColumns",
				"Insert select(mapColumn(",
				"          COST_ELEM_CD = stg_COST_ELEM_CD,",
				"          VAL_CAT_CD = stg_VAL_CAT_CD,",
				"          REV_IND = stg_REV_IND,",
				"          HASH_CD = stg_hash_cd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"Delete select(mapColumn(",
				"          COST_ELEM_CD = ex_COST_ELEM_CD,",
				"          VAL_CAT_CD = ex_VAL_CAT_CD,",
				"          REV_IND = ex_REV_IND,",
				"          HASH_CD = ex_HASH_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnss",
				"selectColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          COST_ELEM_CD,",
				"          VAL_CAT_CD,",
				"          REV_IND,",
				"          HASH_CD",
				"     )) ~> sink1",
				"selectColumnss sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['COST_ELEM_CD'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          COST_ELEM_CD,",
				"          VAL_CAT_CD,",
				"          REV_IND,",
				"          HASH_CD",
				"     )) ~> sink2"
			]
		}
	}
}